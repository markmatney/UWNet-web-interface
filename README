WaterCom



This document describes the software components of WaterCom.



I. index.html - web interface

This is a form that takes input values from the user, to be used in an
experiment:

  1. transmission power: max, min, step
  2. blocks/packet: max, min, step
  3. transmission mode: max, min, step
  4. number of trials (repetitions)
  5. test data: uploaded file to transfer

Transmission power, blocks/packet, and transmission mode will define the range
of values to test, and the script will transmit the test data under every
possible set of parameters, for the number of repetitions specified.

TODO: add additional form for users to login and view results of submitted jobs



II. submit.php - form validation

This script validates the form input, sanitizes SQL, etc.



III. uw.py - the test script

The test script is a Python file that is adopted from the RUN_CHINFO.SH and
SUB_PKT.SH shell scripts. On a schedule, it will retrieve recently enqueued
experiments (rows in InputQueue that were submitted since the last batch of
experiments was run) from the database, run the test script on the fields of
each row, and store results in the database (Results table).

During each experiment, a logfile is kept with information about the success or
failure of each packet transmission; whether or not data was mutated or lost
in transmission; number of bytes transmitted with each packet; current values
of trial number, transmission power, mode, and blocks/packet.

[!] TODO: report database query errors in logfile



IV. create.sql - initializes the database

The database (called 'UWNet') will store the parameters that users submit with
the form, and the results of the tests. There are two tables. The InputQueue
table will store each form submission. The Results table will store the total
delay time, number of lost packets, and number of retransmissions made during
each transmission of the test data.


	1. InputQueue
+----+------+------+------+------+------+------+------+------+------+-----/
| id | mpwr | lpwr | ppwr | mbkn | lbkn | pbkn | mmod | lmod | pmod | ...
+----+------+------+------+------+------+------+------+------+------+-----/

/-----+------+----------+-------+------------+-----------+----------------+
  ... | rptt | testData | email | exitStatus | emailSent | plotsGenerated |
/-----+------+----------+-------+------------+-----------+----------------+

id		each row has unique

mpwr/lpwr/ppwr	max, min, step power

mbkn/lbkn/pbkn  max, min, step blocks per packet

mmod/lmod/pmod  max, min, step transmission mode

rptt		number of times to repeat each experiment

		[!] TODO: May want to store the previous ten numerical
		parameters in JSON

testData	uploaded file (path on our server)

email		email to send test results to

exitStatus	the exit status of the test script, e.g. if it ran each
		experiment correctly

		[!] TODO: specify exit status codes

emailSent	TRUE if results have been sent to the email specified in the 
		queue table, FALSE otherwise 

plotsGenerated	TRUE if the plots for this experiment have been generated,
		FALSE otherwise

		[!] TODO: this will change if/when interactive plot page comes

[!] TODO: add to the database these columns:
	- dateSubmitted: datetime var for form submission date/time
	- dateCompleted: datetime for experiment completion date/time


	2. Results
+--------------+------------+---------+
| experimentId | parameters | results |
+--------------+------------+---------+

experimentId	Foreign key for id in InputQueue, there will be a row for each
		combination of parameters, for each trial.

parameters	JSON string representing the input parameters.

		{ "pwr": $TRANSMISSION_POWER,
		  "bkn": $BLOCKS_PER_PACKET,
		  "mod": $TRANSMISSION_MODE }

results		JSON string representing the experimental results for all trials using
		a particular parameter combination, keyed by the trial number.

		{ "0": { "delay": $DELAY_TIME,
		         "loss":  $PACKET_LOSS_COUNT,
		         "retx":  $PACKET_RETX_COUNT },
                  "1": ...
                }

		[!] TODO: calculate bit loss rate (derived from block loss rate)
		retx == retransmissions



V. auto_generate_plots.py - data plotting

[!] TODO: may want to have user accounts instead of emailing results

In order for users to see the results of their test, we will generate plots of
the data and other summaries/analysis, and send the results to them via the
email provided when they submitted the form.



[!] TODO: add section for interactive user portal
